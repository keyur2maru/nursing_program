{"ast":null,"code":"// sortUtil.js\nconst sortCandidates = (candidates, sortKey, sortDir) => {\n  return [...candidates].sort((a, b) => {\n    let modifier = sortDir === 'asc' ? 1 : -1;\n    let aValue = getSortValue(a, sortKey);\n    let bValue = getSortValue(b, sortKey);\n    if (aValue < bValue) return -1 * modifier;\n    if (aValue > bValue) return 1 * modifier;\n    return 0;\n  });\n};\nconst getSortValue = (candidate, sortKey) => {\n  if (sortKey in candidate.scoreBreakdown) {\n    let value = candidate.scoreBreakdown[sortKey];\n    // Convert to number if possible for proper comparison\n    if (!isNaN(parseFloat(value)) && isFinite(value)) {\n      return Number(value);\n    }\n    return value;\n  } else if (sortKey === 'name') {\n    // Case insensitive sorting for names\n    return candidate[sortKey].toLowerCase();\n  } else {\n    let value = candidate[sortKey];\n    // Convert to number if possible for proper comparison\n    if (!isNaN(parseFloat(value)) && isFinite(value)) {\n      return Number(value);\n    }\n    return value;\n  }\n};\nexport default {\n  sortCandidates\n};","map":{"version":3,"names":["sortCandidates","candidates","sortKey","sortDir","sort","a","b","modifier","aValue","getSortValue","bValue","candidate","scoreBreakdown","value","isNaN","parseFloat","isFinite","Number","toLowerCase"],"sources":["/Users/keyurmaru/Binary_Tree/Binary_Tree/nursing-college-app/src/sortUtil.js"],"sourcesContent":["// sortUtil.js\nconst sortCandidates = (candidates, sortKey, sortDir) => {\n    return [...candidates].sort((a, b) => {\n      let modifier = sortDir === 'asc' ? 1 : -1;\n      let aValue = getSortValue(a, sortKey);\n      let bValue = getSortValue(b, sortKey);\n      if (aValue < bValue) return -1 * modifier;\n      if (aValue > bValue) return 1 * modifier;\n      return 0;\n    });\n  };\n  \nconst getSortValue = (candidate, sortKey) => {\nif (sortKey in candidate.scoreBreakdown) {\n    let value = candidate.scoreBreakdown[sortKey];\n    // Convert to number if possible for proper comparison\n    if (!isNaN(parseFloat(value)) && isFinite(value)) {\n    return Number(value);\n    }\n    return value;\n} else if (sortKey === 'name') {\n    // Case insensitive sorting for names\n    return candidate[sortKey].toLowerCase();\n} else {\n    let value = candidate[sortKey];\n    // Convert to number if possible for proper comparison\n    if (!isNaN(parseFloat(value)) && isFinite(value)) {\n    return Number(value);\n    }\n    return value;\n}\n};\n\nexport default {\nsortCandidates,\n};\n"],"mappings":"AAAA;AACA,MAAMA,cAAc,GAAGA,CAACC,UAAU,EAAEC,OAAO,EAAEC,OAAO,KAAK;EACrD,OAAO,CAAC,GAAGF,UAAU,CAAC,CAACG,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;IACpC,IAAIC,QAAQ,GAAGJ,OAAO,KAAK,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC;IACzC,IAAIK,MAAM,GAAGC,YAAY,CAACJ,CAAC,EAAEH,OAAO,CAAC;IACrC,IAAIQ,MAAM,GAAGD,YAAY,CAACH,CAAC,EAAEJ,OAAO,CAAC;IACrC,IAAIM,MAAM,GAAGE,MAAM,EAAE,OAAO,CAAC,CAAC,GAAGH,QAAQ;IACzC,IAAIC,MAAM,GAAGE,MAAM,EAAE,OAAO,CAAC,GAAGH,QAAQ;IACxC,OAAO,CAAC;EACV,CAAC,CAAC;AACJ,CAAC;AAEH,MAAME,YAAY,GAAGA,CAACE,SAAS,EAAET,OAAO,KAAK;EAC7C,IAAIA,OAAO,IAAIS,SAAS,CAACC,cAAc,EAAE;IACrC,IAAIC,KAAK,GAAGF,SAAS,CAACC,cAAc,CAACV,OAAO,CAAC;IAC7C;IACA,IAAI,CAACY,KAAK,CAACC,UAAU,CAACF,KAAK,CAAC,CAAC,IAAIG,QAAQ,CAACH,KAAK,CAAC,EAAE;MAClD,OAAOI,MAAM,CAACJ,KAAK,CAAC;IACpB;IACA,OAAOA,KAAK;EAChB,CAAC,MAAM,IAAIX,OAAO,KAAK,MAAM,EAAE;IAC3B;IACA,OAAOS,SAAS,CAACT,OAAO,CAAC,CAACgB,WAAW,CAAC,CAAC;EAC3C,CAAC,MAAM;IACH,IAAIL,KAAK,GAAGF,SAAS,CAACT,OAAO,CAAC;IAC9B;IACA,IAAI,CAACY,KAAK,CAACC,UAAU,CAACF,KAAK,CAAC,CAAC,IAAIG,QAAQ,CAACH,KAAK,CAAC,EAAE;MAClD,OAAOI,MAAM,CAACJ,KAAK,CAAC;IACpB;IACA,OAAOA,KAAK;EAChB;AACA,CAAC;AAED,eAAe;EACfb;AACA,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}